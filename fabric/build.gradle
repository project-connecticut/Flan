ext {
    shadow_dep = [group: "com.github.johnrengelman", name: "shadow", version: "8.+"]
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath project.hasProperty('shadow_dep') ? shadow_dep : ["group": "com.github.johnrengelman", "name": "shadow", "version": "8.+"]
        classpath "com.modrinth.minotaur:Minotaur:2.+"
    }
}

apply plugin: com.modrinth.minotaur.Minotaur
apply plugin: com.github.jengelman.gradle.plugins.shadow.ShadowPlugin
apply plugin: com.matthewprenger.cursegradle.CurseGradlePlugin
apply from: "https://raw.githubusercontent.com/Flemmli97/GradleScripts/mc-architectury-fabric-neoforge/changelog.gradle"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        client {
            vmArgs "-Dmixin.debug.export=true"
        }
    }
}

ext {
    mod_meta = ["version": project.version, "homepage": curse_page_fabric,
                "mcversion": minecraft_version, "fabric_version": fabric_version]
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand mod_meta
    }
    exclude '.cache'
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    archiveClassifier.set("fabric-sources")
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

curseforge {
    apiKey = findProperty('curseApiToken') ?: 0

    project {
        id = "${curse_id_fabric}"
        "${project.curse_versions}".split(', ').each {
            addGameVersion "${it}"
        }
        addGameVersion "Fabric"
        mainArtifact(remapJar) {
            def txt = project.ext.changelog(1).replace("\n-", "\n\n- ")
            txt = txt + "\n\n" + "For past versions see: ${project.full_changelog}"
            changelog = txt
            changelogType = "markdown"
            releaseType = 'release'
        }
        if (!"${project.curse_dep_fabric}".isEmpty() || project.hasProperty("optional_curse_dep_fabric")) {
            relations {
                if (!"${project.curse_dep_fabric}".isEmpty()) {
                    "${project.curse_dep_fabric}".split(', ').each {
                        requiredDependency "${it}"
                    }
                }
                if (project.hasProperty("optional_curse_dep_fabric")) {
                    "${project.optional_curse_dep_fabric}".split(', ').each {
                        optionalDependency "${it}"
                    }
                }
            }
        }
    }
}

modrinth {
    token = findProperty('modrinthApiToken') ?: '0'
    projectId = "${modrinth_id}"
    versionNumber = version
    versionName = remapJar.archiveFileName
    changelog = project.ext.changelog(1) + "\n\n" + "For past versions see: ${project.full_changelog}"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = "${project.modrinth_versions}".split(', ').toList()
    loaders = ["fabric"]
    dependencies {
        if (!"${project.modrinth_dep_fabric}".isEmpty()) {
            "${project.modrinth_dep_fabric}".split(', ').each {
                required.project "${it}"
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                classifier null
                builtBy remapJar
            }
            artifact(sourcesJar) {
                classifier "sources"
                builtBy remapSourcesJar
            }
            artifactId project.archives_base_name
            version project.version + "-fabric"
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/project-connecticut/Flan"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'Fabric-Permission-API'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        name = "Gunpowder"
        url = "https://maven.martmists.com/releases"
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
    maven {
        name = "HavenKing"
        url = "https://hephaestus.dev/release"
    }
    maven {
        name = "FTB"
        url = "https://maven.saps.dev/minecraft"
    }
    maven {
        name = "CurseMaven"
        url "https://www.cursemaven.com"
    }
    maven { url = "https://jitpack.io" }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
        content {
            includeGroup 'com.jamieswhiteshirt'
        }
    }
    maven { url "https://maven.nucleoid.xyz/" }
}

dependencies {
    modImplementation "me.lucko:fabric-permissions-api:${rootProject.fabric_permissions_api}"

    modImplementation (octo_economy_api) {
        exclude group: "net.fabricmc.fabric-api"
    }
    modCompileOnly diamond_economy

    modCompileOnly "io.github.ladysnake:PlayerAbilityLib:${rootProject.player_ability_lib}"

    //modRuntimeOnly "dev.ftb.mods:ftb-ranks-fabric:${ftb_ranks}"
    //modRuntimeOnly "dev.ftb.mods:ftb-chunks-fabric:${ftb_chunks}"
    //CompileOnly cause too many dependency
    modCompileOnly goml_reserved
    modCompileOnly include("com.jamieswhiteshirt:rtree-3i-lite-fabric:0.3.0")

    modCompileOnly harvest_with_ease_fabric
    modCompileOnly "eu.pb4:common-protection-api:${rootProject.common_prot_api}"
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set "fabric-api-source"
    from project(":common").sourceSets.main.output + sourceSets.main.output
    include "io/github/flemmli97/flan/api/**"
    include "fabric.mod_api.json" //Include this so it gets remapped as a dependency
    rename("fabric.mod_api.json", "fabric.mod.json")
}

task remapApiJar(type: net.fabricmc.loom.task.RemapJarTask) {
    archiveClassifier.set "fabric-api"
    input.set apiJar.archiveFile
    addNestedDependencies = false
    dependsOn apiJar
    from sourceSets.main.output
    /* Putting it here doesnt seem to work...
    include "fabric.mod_api.json" //Include this so it gets remapped as a dependency
    rename("fabric.mod_api.json", "fabric.mod.json")
    */
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapApiJar) {
                classifier "api"
                builtBy remapApiJar
            }
        }
    }
}
